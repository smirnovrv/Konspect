#Область ОписаниеПеременных

#КонецОбласти

#Область ОбработчикиСобытийФормы

//Основная процедура,
//Добавляет начальную (пустую) страницу или формирует имеющие в ТЧ Поля
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	 
	Если ПолучитьКоличествоСтрокПолей() = 0 Тогда
 		ДобавитьНачальнуюСтраницуHTML();	
	КонецЕсли;
	
	Объект.ОсновнойТекст = СформироватьОсновнойТекст(Неопределено);
	
КонецПроцедуры

//Основная процедура,
//Настраиваем видимость элементов на форме
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимость();
КонецПроцедуры

//Срабатывает при выборе из другого объекта, картинки 
//
&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)	
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ЗаметкиФайлы") Тогда
		Структура = СформироватьСтруктуруДляВставкиФайла(ВыбранноеЗначение);
	Иначе
		Структура = СформироватьСтруктуруДляВставки(ВыбранноеЗначение);
	КонецЕсли;	
	
 	ДобавитьСтрокуHTML(Структура); 
	
	Объект.ОсновнойТекст 	= СформироватьОсновнойТекст(Неопределено);	
	
	Модифицированность 		= Истина;

КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

//Когда редактирование закончено, 
//изменяем видимость элементов на форме
//обновляем основной HTML
//
&НаКлиенте
Процедура РедактироватьПриИзменении(Элемент)
	УстановитьВидимость();

	Если ЗначениеЗаполнено(ТекстСтроки) Тогда
		Если НЕ Элементы.Состав.ТекущаяСтрока = Неопределено Тогда	
			ТекСтрока = Объект.Состав.Получить(Элементы.Состав.ТекущаяСтрока);
			ТекСтрока.Значение = ТекстСтроки;

			СтруктураДляВставки = Новый Структура;
			СтруктураДляВставки.Вставить("Номер", ТекСтрока.НомерСтроки);
			СтруктураДляВставки.Вставить("текстСтроки", ТекстСтроки);
			 
			Объект.ОсновнойТекст = СформироватьОсновнойТекст(СтруктураДляВставки);
		КонецЕсли;

		Модифицированность 		= Истина;
	КонецЕсли;

КонецПроцедуры

//Когда редактирование закончено,
//меняем текст конкретной, редактируемой строки
//
&НаКлиенте
Процедура ТекстСтрокиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ИзменитьТекстСтроки(Текст);
КонецПроцедуры

&НаКлиенте
Процедура ТемаПриИзменении(Элемент)
	ТемаПриИзмененииНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойТекстПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	 СтандартнаяОбработка = Ложь;
	 
	 Если ЗначениеЗаполнено(ДанныеСобытия.Href) Тогда    
		 Если Элементы.ПредпросмотрHTML.Видимость 	= Истина Тогда 
			 Элементы.ПредпросмотрHTML.Видимость 	= Ложь;
		 Иначе	
			 Элементы.ПредпросмотрHTML.Видимость 	= Истина;
		 КонецЕсли; 
		 
		 ЧтоИскать = "#Описание";
		 Если СтрНайти(ДанныеСобытия.Href, ЧтоИскать)>0 Тогда  
			 ТекстВставки 		= ПолучитьОписаниеИзСтроки(ДанныеСобытия.Element.href);
			 ПредпросмотрHTML 	= ВставкаДляСтрокиТекста(ТекстВставки);
		 Иначе
			 ПредпросмотрHTML 	= ДанныеСобытия.Href;
		 КонецЕсли;
	 КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПоля

//Заполняем поле ТекстСтрокиHTML
//
&НаКлиенте
Процедура ПоляПриАктивизацииСтроки(Элемент)
	
	ТекСтрока = Элемент.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрока.Картинка) Тогда
		СтрокаВставкиРазмера = "' width='"+ТекСтрока.Ширина+"' height='"+ТекСтрока.Высота+"'>";
		ТекстСтроки 	= ТекСтрока.Значение;
		ТекстДляВставки = "<img src='data:image/;base64," + Base64ДанныеСервер(ТекСтрока.Картинка)+СтрокаВставкиРазмера;
		ТекстСтрокиHTML = ВставкаДляСтрокиТекста(ТекстДляВставки);
	Иначе	
		ИзменитьТекстСтроки(Неопределено);
	КонецЕсли;
		
КонецПроцедуры

//Изменяем поле ТекстСтрокиHTML для картинки
//
&НаКлиенте
Процедура ПоляШиринаПриИзменении(Элемент)
	ПоискШирина = СтрНайти(ТекстСтрокиHTML,"width");
	ПоискВысота = СтрНайти(ТекстСтрокиHTML,"height");
	Разница 	= ПоискВысота - ПоискШирина;
	Если ПоискШирина > 0 Тогда 
		СтрокаДляЗамены = Сред(ТекстСтрокиHTML, ПоискШирина, Разница-1);
		СтрокаЗамены 	= "width='"+Элементы.Состав.ТекущиеДанные.Ширина+"'";
	КонецЕсли;	
	ТекстСтрокиHTML = СтрЗаменить(ТекстСтрокиHTML, СтрокаДляЗамены, СтрокаЗамены); 
КонецПроцедуры

//Изменяем поле ТекстСтрокиHTML для картинки
//
&НаКлиенте
Процедура ПоляВысотаПриИзменении(Элемент)
	ПоискВысота = СтрНайти(ТекстСтрокиHTML,"height");
	ПоискСтиль 	= СтрНайти(ТекстСтрокиHTML,"style");
	Разница 	= ПоискСтиль - ПоискВысота;

	Если ПоискВысота > 0 Тогда
		СтрокаДляЗамены = Сред(ТекстСтрокиHTML, ПоискВысота, Разница-1);
		СтрокаЗамены 	= "height='"+Элементы.Состав.ТекущиеДанные.Высота+"'";
	КонецЕсли;
	ТекстСтрокиHTML = СтрЗаменить(ТекстСтрокиHTML, СтрокаДляЗамены, СтрокаЗамены); 
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы

//Открывает окно для ввода текста
//
&НаКлиенте
Процедура КомандаВвестиТекст(Команда)
	
	//ОткрытьФорму("Справочник.Заметки.Форма.ФормаРедактирования", , ЭтотОбъект);
	Редактировать = Истина;
	
	Элементы.ГруппаПоля.Видимость 			= Ложь;
	Элементы.ГруппаРедактирования.видимость = Истина;
	Элементы.ГруппаОсновнойТекст.видимость  = Ложь;
КонецПроцедуры

//Изменяет выделенный текст на жирный
//
&НаКлиенте
Процедура КомандаЖирный(Команда)
    Структура = СформироватьСтруктуруФорматированиТекста();
    Структура.Вставить("Символ", "b");
    
	ИзменитьВыделенное(Структура);
КонецПроцедуры

//Изменяет выделенный текст на курсив
//
&НаКлиенте
Процедура КомандаКурсив(Команда)
	Структура = СформироватьСтруктуруФорматированиТекста();
	Структура.Вставить("Символ", "i");
	
	ИзменитьВыделенное(Структура);
КонецПроцедуры

//Изменяет выделенный текст на поддчеркнутый
//
&НаКлиенте
Процедура КомандаПодчеркнутый(Команда) 
	Структура = СформироватьСтруктуруФорматированиТекста();
	Структура.Вставить("Символ", "u");
	
	ИзменитьВыделенное(Структура);
КонецПроцедуры

//Изменяет выделенный текст на зачеркнутый
//
&НаКлиенте
Процедура КомандаЗачеркнутый(Команда)
	Структура = СформироватьСтруктуруФорматированиТекста();
	Структура.Вставить("Символ", "s");
	
	ИзменитьВыделенное(Структура);
КонецПроцедуры

//Добавляет к выделенному тексту <
//
&НаКлиенте
Процедура КомандаЗнакМеньше(Команда) 	
	//Структура = Новый Структура("Символ, Одиночный, Спесимвол, МестоВставки","&lt; ", Истина, Истина, "Перед");
		Структура = Новый Структура;
	Структура.Вставить("Символ"			, "&lt; ");
	Структура.Вставить("Одиночный"		, Истина);
	Структура.Вставить("Спесимвол"		, Истина);
	Структура.Вставить("МестоВставки"	, "Перед");
	Структура.Вставить("Заголовок"		, Ложь);
	ИзменитьВыделенное(Структура);
КонецПроцедуры

//Добавляет к выделенному тексту >
//
&НаКлиенте
Процедура КомандаЗнакБольше(Команда)
	//Структура = Новый Структура("Символ, Одиночный, Спесимвол, МестоВставки"," &gt;", Истина, Истина, "После");
	Структура = Новый Структура;
	Структура.Вставить("Символ"			, " &gt;");
	Структура.Вставить("Одиночный"		, Истина);
	Структура.Вставить("Спесимвол"		, Истина);
	Структура.Вставить("МестоВставки"	, "После");
	Структура.Вставить("Заголовок"		, Ложь);
	ИзменитьВыделенное(Структура);
КонецПроцедуры

//Открывает диалог загрузки новой картинки/файла
//
&НаКлиенте
Процедура КомандаЗагрузитьКартинку(Команда)
	Диалог = новый ПараметрыДиалогаПомещенияФайлов("Выберите файл картинки", Ложь,);
		
	Оповещение = новый ОписаниеОповещения("ПослеЗакрытияДиалогаВыбора", ЭтотОбъект);
	
	НачатьПомещениеФайлаНаСервер(Оповещение,,,, Диалог, УникальныйИдентификатор);
	
КонецПроцедуры

//Выбирает картинку/файл из справочника
//
&НаКлиенте
Процедура КомандаДобавитьКартинку(Команда)
	ЗначениеОтбора = Новый Структура("ВладелецФайла", Объект.Ссылка);
	ПараметрыФормы = Новый Структура("Отбор"		, ЗначениеОтбора);
	
	ОткрытьФорму("Справочник.ЗаметкиФайлы.Форма.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

//Сохраняет картинку в файл
//
&НаКлиенте
Процедура КомандаСохранить(Команда)
	
	Если ЗначениеЗаполнено(Элементы.Состав.текущиеДанные.Картинка) Тогда
		Расширение = "jpg";
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогОткрытияФайла.ПолноеИмяФайла 	= Объект.Наименование;
		ДиалогОткрытияФайла.Расширение 		= Расширение;
		ДиалогОткрытияФайла.Заголовок 		= "Укажите каталог для сохранения файла";

		Оповещение = Новый ОписаниеОповещения("ПослеВыбораКаталогаСохраненияФайла", ЭтотОбъект, ДиалогОткрытияФайла);

		ДиалогОткрытияФайла.Показать(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаВставкаСсылки(Команда)
	Оповещение = Новый ОписаниеОповещения("ПослеВыбораСсылки", ЭтотОбъект);
	ОткрытьФорму("Справочник.Заметки.Форма.ВставкаСсылки", , , Новый УникальныйИдентификатор(),,,Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрытьПредпросмотр(Команда)
	Элементы.ГруппаПредпросмотр.Видимость 	= Ложь;
КонецПроцедуры

&НаКлиенте
Процедура КомандаОписание(Команда) 
	
	мВыделенныйТекст = Элементы.ТекстСтроки.ВыделенныйТекст;	
	Если Не мВыделенныйТекст = "" Тогда
		НомерВставки = СтрНайти(Элементы.Состав.ТекущиеДанные.Значение, мВыделенныйТекст);
		НомерВставки = НомерВставки + СтрДлина(мВыделенныйТекст) + 1; 

		ПараметрыВставки = Новый Структура();
		ПараметрыВставки.Вставить("ТекСтрока"		, Элементы.Состав.ТекущаяСтрока);  
		ПараметрыВставки.Вставить("Выделенныйтекст"	, мВыделенныйТекст);
		ПараметрыВставки.Вставить("НомерВставки"	, НомерВставки);
		
		Оповещение = Новый ОписаниеОповещения("ПослеВыбораОписания", ЭтотОбъект, ПараметрыВставки);
		ОткрытьФорму("Справочник.Заметки.Форма.ФормаОписания", ПараметрыВставки, , Новый УникальныйИдентификатор(),,,Оповещение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КомандаH1(Команда)
	Структура = СформироватьСтруктуруФорматированиТекста();
	Структура.Вставить("Заголовок", Истина);
    Структура.Вставить("Символ", "H1");
    
	ИзменитьВыделенное(Структура);
КонецПроцедуры

&НаКлиенте
Процедура КомандаH2(Команда)
	Структура = СформироватьСтруктуруФорматированиТекста();
	Структура.Вставить("Заголовок", Истина);
    Структура.Вставить("Символ", "H2");
    
	ИзменитьВыделенное(Структура);
КонецПроцедуры

&НаКлиенте
Процедура КомандаH3(Команда)
	Структура = СформироватьСтруктуруФорматированиТекста();
	Структура.Вставить("Заголовок", Истина);
    Структура.Вставить("Символ", "H3");
    
	ИзменитьВыделенное(Структура);
КонецПроцедуры

&НаКлиенте
Процедура КомандаH4(Команда)
	Структура = СформироватьСтруктуруФорматированиТекста();
	Структура.Вставить("Заголовок", Истина);
    Структура.Вставить("Символ", "H4");
    
	ИзменитьВыделенное(Структура);
КонецПроцедуры

&НаКлиенте
Процедура КомандаH5(Команда)
	Структура = СформироватьСтруктуруФорматированиТекста();
	Структура.Вставить("Заголовок", Истина);
    Структура.Вставить("Символ", "H5");
    
	ИзменитьВыделенное(Структура);
КонецПроцедуры

&НаКлиенте
Процедура КомандаH6(Команда)
	Структура = СформироватьСтруктуруФорматированиТекста();
	Структура.Вставить("Заголовок", Истина);
    Структура.Вставить("Символ", "H6");
    
	ИзменитьВыделенное(Структура);
КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область КартинкаФайл
//Обработка выбора картинки/файла
//
&НаКлиенте
Процедура ПослеЗакрытияДиалогаВыбора (ОписаниеФайла, ДопПараметры) Экспорт
	
	Если ОписаниеФайла = Неопределено Тогда
		Возврат;
	КОнецЕсли;
	
	СсылкаНаОбъект 	= Объект.Ссылка;
	Расширение 		= ОписаниеФайла.СсылкаНаФайл.Расширение;
	Структура 		= Новый Структура();
	Структура.Вставить("Адрес", 		ОписаниеФайла.Адрес);
	Структура.Вставить("Владелец", 		СсылкаНаОбъект);
	Структура.Вставить("Имя", 			ОписаниеФайла.СсылкаНаФайл.Файл.ИмяБезРасширения);
	Структура.Вставить("Расширение", 	Расширение);	
	 
	СсылкаФайл	= СохранитьФайлВХранилище(Структура);
	НомерСтроки = ПолучитьНомерСтрокиДляВставки();
	
	Структура = Новый Структура;
 	Структура.Вставить("ТекстДобавления", ОписаниеФайла.СсылкаНаФайл.Имя);
 	Структура.Вставить("НомерСтроки"	, НомерСтроки-1);
 	Структура.Вставить("Вставка"		, Истина);
 	Структура.Вставить("Тэг"			, ПолучитьТэгКартинки(Расширение));
 	Структура.Вставить("Картинка"		, СсылкаФайл);
 	
 	 ДобавитьСтрокуHTML(Структура); 
	
	Объект.ОсновнойТекст 	= СформироватьОсновнойТекст(Неопределено);	
	
	Модифицированность 		= Истина;

КонецПроцедуры

//Создает новый элеменет справочника ЗаметкиФайлы
//
&НаСервере
Функция СохранитьФайлВХранилище(Структура)
	
	НовФайл = Справочники.ЗаметкиФайлы.СоздатьЭлемент();
	НовФайл.ВладелецФайла 		= Структура.Владелец;
	НовФайл.Наименование 		= Структура.Имя;
	НовФайл.Расширение			= Структура.Расширение;
	НовФайл.ДатаСоздания 		= ТекущаяДатаСеанса();
	НовФайл.ФайлХранилище 		= Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(Структура.Адрес));
	
	НовФайл.Записать();
	
	Возврат НовФайл.Ссылка;
КонецФункции

//Определяем по расширнею картинка (img) это или файл (File)
//
&НаСервере
Функция ПолучитьТэгКартинки(Расширение)	
	
	Если ЭтоКартинка(Расширение) Тогда
		ТэгКартинки = Справочники.Тэги.img;
	Иначе
		ТэгКартинки = Справочники.Тэги.File;
	КонецЕсли;	
		
	Возврат ТэгКартинки;	
	
КонецФункции

//Определим картинку из списка расширений
//
&НаСервере
Функция ЭтоКартинка(Расширение)
	
	ЭтоКартинка = Ложь;
	
	Если Расширение = ".jpeg" 
		Или Расширение = ".jpg"
		Или Расширение = ".gif"
		Или Расширение = ".bmp"
		Или Расширение = ".svg"
		Или Расширение = ".png" Тогда
		
		ЭтоКартинка = Истина;	
	КонецЕсли;
			
	Возврат ЭтоКартинка;		
КонецФункции

//Добавляем данные по файлу в структуру - унификация 
//
&НаСервере
Функция СформироватьСтруктуруДляВставкиФайла(СсылкаФайл)
	НомерСтроки = ПолучитьНомерСтрокиДляВставки();
	
	Структура = Новый Структура();	
 	Структура.Вставить("ТекстДобавления", СсылкаФайл.Наименование);
 	Структура.Вставить("НомерСтроки"	, НомерСтроки-1);
 	Структура.Вставить("Вставка"		, Истина);
 	Структура.Вставить("Тэг"			, ПолучитьТэгКартинки(СсылкаФайл.Расширение));
 	Структура.Вставить("Картинка"		, СсылкаФайл);

	Возврат Структура;
КонецФункции

//Получаем Base64Данные
//
&НаСервере
Функция Base64ДанныеСервер(Картинка)	
	Возврат Картинка.Base64Данные;
КонецФункции

//Оповещение команды Сохранить
//
&НаКлиенте
Процедура ПослеВыбораКаталогаСохраненияФайла(КаталогВыбор, Диалог) Экспорт
    
    Если КаталогВыбор = Неопределено Тогда
        Возврат;
    КонецЕсли;
    
    Если КаталогВыбор.Количество()=0 Тогда
        Возврат;
    КонецЕсли;
    
    ИмяФайла = КаталогВыбор[0];
    
   	Сведения =  ПолучитьСведенияОФайле(Элементы.Состав.ТекущиеДанные.Картинка);
    Если ЗначениеЗаполнено(Сведения.Наименование) И ЗначениеЗаполнено(Сведения.Расширение) Тогда
    	ИмяФайла = Диалог.Каталог + Сведения.Наименование + Сведения.Расширение;
    КонецЕсли;
    	
    ДвДанные= СсылкаНаДвоичныеДанныеФайла(Элементы.Состав.ТекущиеДанные.Картинка);
    
    Попытка
        ДвДанные.Записать(ИмяФайла);
        ПоказатьПредупреждение(,"Файл записан!");
    Исключение
        ПоказатьПредупреждение(,"Ошибка: " + ОписаниеОшибки() + ", записи файла. Файл не записан!");    
    КонецПопытки;
    
КонецПроцедуры

//Получаем ДвоичныеДанные
//
&НаСервере
Функция СсылкаНаДвоичныеДанныеФайла(Картинка)
	  
  Возврат Картинка.ФайлХранилище.Получить();
 
КонецФункции

//Получаем сведения о файле
//
&НаСервере
Функция ПолучитьСведенияОФайле(Картинка)
	
	Структура = Новый Структура();
	Структура.Вставить("Наименование",	Картинка.Наименование);
	Структура.Вставить("Расширение",	Картинка.Расширение);
	
	Возврат Структура;

КонецФункции

#КонецОбласти

#Область Изменить
//Меняем текст для предпросмотре
//	
&НаКлиенте
Процедура ИзменитьТекстСтроки(ТекстВставки)
	  
	Если ТекстВставки = Неопределено Тогда
		СтрокаТаб = Элементы.Состав.ТекущиеДанные;

		Структура = Новый Структура();
		Структура.Вставить("Тэг"			, СтрокаТаб.Тэг);
		Структура.Вставить("Картинка"		, СтрокаТаб.Картинка);
		Структура.Вставить("Ширина"			, СтрокаТаб.Ширина);
		Структура.Вставить("Высота"			, СтрокаТаб.Высота);	
		Структура.Вставить("Значение"		, СтрокаТаб.Значение);
		Структура.Вставить("НомерСтроки"	, СтрокаТаб.НомерСтроки);
		
		Если ЗначениеЗаполнено(СтрокаТаб.Тэг) Тогда
			Структура.Вставить("ОдиночныйТэг"	, ОдиночныйТэг(СтрокаТаб.Тэг));
			Структура.Вставить("ТэгНаименование", СТрока(СтрокаТаб.Тэг));
		Иначе
			Структура.Вставить("ОдиночныйТэг"	, Ложь);
			Структура.Вставить("ТэгНаименование", Неопределено);
		КонецЕсли;	

		Если ЗначениеЗаполнено(СтрокаТаб.Тэг) Тогда
			ТекстВставки = СформироватьТекстДляВставки(Структура);
			Элементы.ТекстСтроки.Доступность = Истина;
		Иначе
			ТекстВставки = "Нет редактируется";
			Элементы.ТекстСтроки.Доступность = Ложь;
		КонецЕсли;
		ТекстСтроки  	= СтрокаТаб.Значение;
	Иначе
		ТекстСтроки  	= ТекстВставки;
		ТекстВставки 	= СтрЗаменить(ТекстВставки, Символы.ПС, "<br>");
	КонецЕсли;	
	
	ТекстСтрокиHTML = ВставкаДляСтрокиТекста(ТекстВставки);

 КонецПроцедуры
  
// Изменить выделенное.
// Модифицирует выделенный текст по условия из структуры  
//  
&НаКлиенте
Процедура ИзменитьВыделенное(Структура)
	
	ВыделенныйТекстДо = Элементы.ТекстСтрокиРасширеннаяПодсказка.Родитель.ВыделенныйТекст;

	Если Не ВыделенныйТекстДо = "" Тогда
		Если Структура.Одиночный Тогда 
			Если Структура.Спесимвол Тогда
				Если Структура.МестоВставки = "Перед" Тогда
					ВыделенныйТекст = Структура.Символ + ВыделенныйТекстДо;
				Иначе
					ВыделенныйТекст = ВыделенныйТекстДо + Структура.Символ;	
				КонецЕсли;		
			иначе
				ВыделенныйТекст = "<" + Структура.Символ + ">" + ВыделенныйТекстДо;	
			КонецЕсли;	
		Иначе
			Если Структура.Символ = "href" Тогда
				ВыделенныйТекст = "<a href=" + Структура.Адрес + ">" + Структура.Описание + "</a>";
			ИначеЕсли Структура.Заголовок Тогда		
				ВыделенныйТекст = ВыделенныйТекстДо;			
			Иначе	 
				ВыделенныйТекст = "<" + Структура.Символ + ">" + ВыделенныйТекстДо + "</" + Структура.Символ + ">";
			КонецЕсли;
		КонецЕсли;

		Элементы.ТекстСтрокиРасширеннаяПодсказка.Родитель.ВыделенныйТекст = "";
		Элементы.ТекстСтрокиРасширеннаяПодсказка.Родитель.ВыделенныйТекст = ВыделенныйТекст;

		Если ЗначениеЗаполнено(Элементы.Состав.ТекущиеДанные) Тогда
			ТекстВставки = Элементы.Состав.ТекущиеДанные.Значение;
			ТекстВставки = СтрЗаменить(ТекстВставки, ВыделенныйТекстДо, ВыделенныйТекст);
			ТекстВставки = СтрЗаменить(ТекстВставки, Символы.ПС, "<br>");

			ТекстСтрокиHTML = ВставкаДляСтрокиТекста(ТекстВставки);
		Иначе //если это новая строка 
			
			ВыбранноеЗначение = Новый Структура();
			ВыбранноеЗначение.Вставить("ВведенныйТекст"	, ВыделенныйТекст);
			ВыбранноеЗначение.Вставить("Тэг"			, ПредопределенноеЗначение("Справочник.Тэги."+Структура.Символ));
			СтруктураДляДобавления = СформироватьСтруктуруДляВставки(ВыбранноеЗначение);
			ДобавитьСтрокуHTML(СтруктураДляДобавления); 
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

#КонецОбласти

#Область НачальнаяСтраница
// Добавить начальную страницу HTML.
//Формируют пустую струткура Основного текста - HTML документа
//
&НаСервере
Процедура ДобавитьНачальнуюСтраницуHTML()
 	Структура = Новый Структура;
 	
 	Структура.Вставить("Вставка", Ложь); 
 	Структура.Вставить("НомерСтроки"	, 0);
  	Структура.Вставить("Тэг"			, Неопределено);
	
 	Структура.Вставить("ТекстДобавления", "<!DOCTYPE html>");
 	ДобавитьСтрокуHTML(Структура); 
 	
 	Структура.Вставить("ТекстДобавления", "<html lang=""ru"">");
 	ДобавитьСтрокуHTML(Структура); 
 	
 	ТекстДобавления = ДобавитьHead();
 		
 	Структура.Вставить("ТекстДобавления", ТекстДобавления);
 	ДобавитьСтрокуHTML(Структура); 
 	
 	Структура.Вставить("ТекстДобавления", "<body>");
 	ДобавитьСтрокуHTML(Структура); 
 	
 	Структура.Вставить("ТекстДобавления", "</body>");
 	ДобавитьСтрокуHTML(Структура); 
 	
 	Структура.Вставить("ТекстДобавления", "</html>");
 	ДобавитьСтрокуHTML(Структура); 
 
КонецПроцедуры
 
// Добавить head.
//Добавляет секцию head
// 
&НаСервере
Функция ДобавитьHead()
 	ТекстКоментария = "";
 	ТекстКоментария = ТекстКоментария + "<head>";
 	ТекстКоментария = ТекстКоментария + Символы.ПС + "	<meta charset=""UTF-8""" + ">";
 	ТекстКоментария = ТекстКоментария + Символы.ПС + "	<title>" + Объект.Наименование + "</title>";
 	ТекстКоментария = ТекстКоментария + Символы.ПС + "</head>";
 	
 	Возврат ТекстКоментария; 
КонецФункции
#КонецОбласти 
 
#Область ТекстДляВставки
// Сформировать текст для вставки.
// Для строки по номеру, преобразует текс в формат html
//
&НаСервере
Функция СформироватьТекстДляВставки(СтруктураТЧ)

	ТекстДляВставки = "";

	Если ЗначениеЗаполнено(СтруктураТЧ.Тэг) Тогда

		Если СтруктураТЧ.ОдиночныйТэг Тогда
			ТекстДляВставки = ПолучитьТекстДляВставки_Одиночный(СтруктураТЧ);
		Иначе
			ТекстДляВставки = ПолучитьТекстДляВставки_Двойной(СтруктураТЧ);
		КонецЕсли;
	Иначе //Без тегов
		ТекстДляВставки = СтруктураТЧ.Значение;
	КонецЕсли;

	Возврат ТекстДляВставки;
КонецФункции

//Текст Html для одиночного тега
//
&НаСервере
Функция ПолучитьТекстДляВставки_Одиночный(Структура)
	Если ЗначениеЗаполнено(Структура.Картинка) Тогда	
		Если Структура.ТэгНаименование	= "img" Тогда			
			ТекстДляВставки = ПолучитьТекстДляВставки_Картинки(Структура);
		Иначе
			ТекстДляВставки = "<p><a href=""path/to/file"">" + Структура.Значение + " (файл " + Структура.НомерСтроки + ")</a></p>"; //- файл
		КонецЕсли;
	Иначе
		ТекстДляВставки = "<" + Структура.ТэгНаименование + " >" + Структура.Значение; //не картинка 
	КонецЕсли;
	
	Возврат ТекстДляВставки;
КонецФункции

//Текст Html для парного тега
//
&НаСервере
Функция ПолучитьТекстДляВставки_Двойной(Структура)

	//добвим css style и id
	ТекстДляВставки = ПолучитьТекстДляВставкиФормата(Структура);
	
	Возврат ТекстДляВставки;
КонецФункции

//Текст Html для картинки, файла
//
 &НаСервере
Функция ПолучитьТекстДляВставки_Картинки(Структура)
					
	//3-й способ вывести картинку					
	ТекстДляВставки = "";

	Base64Данные 	= Структура.Картинка.Base64Данные;

	Ширина 	= "350";
	Высота 	= "450";
	Высота 	= ?(Структура.Высота = 0, Высота, Структура.Высота);
	Ширина 	= ?(Структура.Ширина = 0, Ширина, Структура.Ширина);
	
	 
	СтрокаВставкиРазмера = "' width='"+Ширина+"' height='"+Высота+"'>";
	ТекстДляВставки = "<p></p>";
	ТекстДляВставки = ТекстДляВставки + "<img src='data:image/;base64," + Base64Данные + СтрокаВставкиРазмера;
   //ТекстДляВставки = ТекстДляВставки + "<img src='data:image/;base64," + Base64Данные+"'>";
	
	ТекстДляВставки = СтрЗаменить(ТекстДляВставки, "'>", "'  style = 'margin-left: 40px'>");
	
	Возврат ТекстДляВставки;
	
КонецФункции

// Получить текст для вставки формата.
// Фоматирует текс в формат html определенного вида
// 
// Возвращаемое значение:
//  Строка - формата html + css
&НаСервере
Функция ПолучитьТекстДляВставкиФормата(Структура)
	ТекстДляВставки = "";
	
	ТекстВставки = СтрЗаменить(Структура.Значение,Символы.ПС ,"<br>");
	ТекстДляВставки =  
		"<" + Структура.ТэгНаименование 
		+ " id=" + Структура.НомерСтроки
		+ " style = 'margin-left: 40px';>"
		+ ТекстВставки 
		+ "</" 
		+ Структура.ТэгНаименование 
		+ ">";
	
	Возврат ТекстДляВставки
	
КонецФункции

//Добавляем данные текста в структуру
//
&НаСервере
Функция СформироватьСтруктуруДляВставки(ВыбранноеЗначение)
	НомерСтроки = ПолучитьНомерСтрокиДляВставки();
	
	Структура = Новый Структура();	
 	Структура.Вставить("ТекстДобавления", ВыбранноеЗначение.ВведенныйТекст);
 	Структура.Вставить("НомерСтроки"	, НомерСтроки-1);
 	Структура.Вставить("Вставка"		, Истина);
 	Структура.Вставить("Тэг"			, ВыбранноеЗначение.Тэг);

	Возврат Структура;
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура УстановитьВидимость()

	Элементы.ГруппаРедактирования.Видимость 	= Редактировать;
	Элементы.Состав.Видимость 					= Редактировать;	
	Элементы.ГруппаОсновнойТекст.Видимость 		= Не Редактировать;
	Элементы.ПредпросмотрHTML.Видимость  		= Ложь;
	Элементы.ГруппаПоля.Видимость 				= Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораСсылки(Параметр, ДопПараметры) Экспорт
	
	ВыделенныйТекст  = Элементы.ТекстСтроки.ВыделенныйТекст;
	
	Если ЗначениеЗаполнено(ВыделенныйТекст) Тогда
		//Структура = Новый Структура("Символ, Одиночный, Спесимвол, МестоВставки", "href", Ложь, Ложь, Ложь);
		Структура = Новый Структура;
		Структура.Вставить("Символ"			, "href");
		Структура.Вставить("Одиночный"		, Ложь);
		Структура.Вставить("Спесимвол"		, Ложь);
		Структура.Вставить("МестоВставки"	, Ложь);
		Структура.Вставить("Адрес"			, Параметр.Адрес);
		Структура.Вставить("Описание"		, Параметр.Описание);
		Структура.Вставить("Заголовок"		, Ложь);
		
		ИзменитьВыделенное(Структура);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораОписания(Параметр, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Параметр.Описание) Тогда
		ID = "Описание_" + Элементы.Состав.ТекущаяСтрока;
		НомерОписания = НайтиНомерОписания(ID);
		Если НомерОписания = Неопределено Тогда
			ID = ID + "1";
		Иначе
			ID = "Описание_" + (Число(Сред(НомерОписания, 10)) + 1);
		КонецЕсли;
		НоваяСтрока = Объект.Примечания.Добавить();
		НоваяСтрока.id 			= ID;
		НоваяСтрока.Вид 		= ПредопределенноеЗначение("Перечисление.ВидыПримечаний.Описание");
		НоваяСтрока.Текстовка 	= Параметр.Описание;
		
		ТекстСтроки = Лев(Элементы.Состав.ТекущиеДанные.Значение, ДопПараметры.НомерВставки-1) 
			+ "<a href='#" + ID +"'> (о) </a>" 
			+ Сред(Элементы.Состав.ТекущиеДанные.Значение,  ДопПараметры.НомерВставки - 1, СтрДлина(ДопПараметры.Выделенныйтекст)); 
		
		Модифицированность = Истина;
		
	КонецЕсли;	
КонецПроцедуры	

&НаСервере
Функция НайтиНомерОписания(ID)
	
	НомерОписания = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаметкиПримечания.id
		|ИЗ
		|	Справочник.Заметки.Примечания КАК ЗаметкиПримечания
		|ГДЕ
		|	ЗаметкиПримечания.Вид = &Вид
		|	И ЗаметкиПримечания.Ссылка = &Ссылка
		|	И ЗаметкиПримечания.id Подобно &id";
	
	Запрос.УстановитьПараметр("id"		, "%"+id+"%");
	Запрос.УстановитьПараметр("Ссылка"	, Объект.Ссылка);
	Запрос.УстановитьПараметр("Вид"		, Перечисления.ВидыПримечаний.Описание);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		НомерОписания = ВыборкаДетальныеЗаписи.id;
	КонецЦикла;

	Возврат НомерОписания;
	
КонецФункции

// Добавить строку HTML.
// Новая строка в ТЧ 
//Параметр - Структура
//формируется функцией СформироватьСтруктуруДляВставки 
//
&НаСервере
Процедура ДобавитьСтрокуHTML(Структура)
 	Если Структура.Вставка Тогда
 		НоваяСтрока = Объект.Состав.Вставить(Структура.НомерСтроки);
 	Иначе	
 		НоваяСтрока = Объект.Состав.Добавить();	
 	КонецЕсли;
 	
 	Если ЗначениеЗаполнено(Структура.Тэг) Тогда
		Если Структура.Тэг.Наименование = "img" Или Структура.Тэг.Наименование = "file" Тогда
			Если Структура.Свойство("Картинка") Тогда
				НоваяСтрока.Картинка = Структура.Картинка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
 			
 	НоваяСтрока.Значение = Структура.ТекстДобавления; 
	Если Не Структура.Тэг = Неопределено Тогда  
 		НоваяСтрока.Тэг      = Структура.Тэг;
	КонецЕсли;
	
 КонецПроцедуры
 
// Сформировать основной текст.
// Формирует страницу html
//
&НаСервере
Функция СформироватьОсновнойТекст(СтруктураДляВставки)
	
	ОсновнойТекст 	= "";
	
	//Выгрузим в ТЧ, что бы можно было искать и вставлять строки - динамически, без записи Объекта
	ТабИзмСтрок 	= Объект.Состав.Выгрузить();
	
	//++ Если есть динамическое изменение, вставим его в Таблицу
	Если Не СтруктураДляВставки = Неопределено Тогда
		СтрокаТЧДляРедактирование = ТабИзмСтрок.Найти(СтруктураДляВставки.Номер, "НомерСтроки");
		Если Не СтрокаТЧДляРедактирование = Неопределено Тогда
			СтрокаТЧДляРедактирование.Значение = СтруктураДляВставки.текстСтроки;
		КонецЕсли;
	КонецЕсли;
	//-- 
	
	//++ Обходим таблицу и формируем HTML
	Для Каждого СтрокаТаб Из ТабИзмСтрок Цикл
		
		Структура = Новый Структура();
		Структура.Вставить("Тэг"			, СтрокаТаб.Тэг);
		Структура.Вставить("ОдиночныйТэг"	, СтрокаТаб.Тэг.Одиночный);
		Структура.Вставить("Картинка"		, СтрокаТаб.Картинка);
		Структура.Вставить("Ширина"			, СтрокаТаб.Ширина);
		Структура.Вставить("Высота"			, СтрокаТаб.Высота);
		Структура.Вставить("ТэгНаименование", СтрокаТаб.Тэг.Наименование);
		Структура.Вставить("Значение"		, СтрокаТаб.Значение);
		Структура.Вставить("НомерСтроки"	, СтрокаТаб.НомерСтроки);
		
		//++ Формируем текст html, для каждой строки
		ТекстДляВставки = СформироватьТекстДляВставки(Структура);
		ОсновнойТекст = ОсновнойТекст + ТекстДляВставки;
	КонецЦикла;
	//--
	
	Возврат ОсновнойТекст;
	
КонецФункции

// Вставки для строки текста.
// Формирует мини страницу html для строки ТЧ
// 
&НаСервере
Функция ВставкаДляСтрокиТекста(ТекстВставки)
	ТекстДляВставки = "";
	
	ТекстДляВставки = "<!DOCTYPE html>"
	+ "<html lang=""ru"">"
	+ "<head>" 
	+ "	<meta charset=""UTF-8""" + ">"
	+ "	<title> </title>"
	+ "</head>"
	+"<body>"
	+ ТекстВставки
	+ "</body>" 
	+ "</html>"
	;
	
	Возврат ТекстДляВставки
	
КонецФункции 	

 //Формирует значения/условия данных для изменения  
 //
 &НаКлиенте
 Функция СформироватьСтруктуруФорматированиТекста()
 	Структура = Новый Структура();
 	Структура.Вставить("Одиночный"		, Ложь);
 	Структура.Вставить("Спесимвол"		, Ложь);
 	Структура.Вставить("МестоВставки"	, Ложь);
 	Структура.Вставить("Заголовок"		, Ложь);
 	
 	Возврат Структура;
 КонецФункции
 
//Возвращаем значение
//	 
&НаСервере
 Функция ОдиночныйТэг(Тэг)
  	
  	Возврат Тэг.Одиночный;
  	
 КонецФункции
  
// Получить номер строки для вставки.
// Ищет номер строки перед закрытие секции body
//
&НаСервере
Функция ПолучитьНомерСтрокиДляВставки()
	
	Отбор = Новый Структура();
	Отбор.Вставить("Значение", "</body>");
	 
	ПоискБоди = Объект.Состав.НайтиСтроки(Отбор);
	
	Если ПоискБоди = Неопределено Тогда
		НомерСтроки = ПолучитьКоличествоСтрокПолей();
	Иначе
		НомерСтроки = ПоискБоди[0].НомерСтроки	
	КонецЕсли;			
	
	Возврат НомерСтроки;
	
КонецФункции

// Получить количество строк полей.
// 
&НаСервере
Функция ПолучитьКоличествоСтрокПолей()
	Возврат Объект.Состав.Количество();
КонецФункции

//Заполняем Лекцию из Темы
//
&НаСервере
Процедура ТемаПриИзмененииНаСервере()
	Объект.Лекция = Объект.Тема.Лекция;
КонецПроцедуры

&НаСервере
Функция ПолучитьОписаниеИзСтроки(СтрокаОписания)
	
	Описание = "";
	ПоискИД = СтрНайти(СтрокаОписания, "#");
	Если ПоискИД > 0 Тогда                        
		ИД = Сред(СтрокаОписания, ПоискИД + 1); 
		Отбор = Новый Структура;
		Отбор.Вставить("id", ИД);
		МассивОтбора = Объект.Примечания.НайтиСтроки(Отбор);
		Если МассивОтбора.Количество()> 0 Тогда  
			 СтрокаОтбора 	= МассивОтбора.Получить(0);
			 Описание 		= СтрокаОтбора.Текстовка;
		КонецЕсли;	
	КонецЕсли;
	
	Возврат Описание;  
	
КонецФункции

#КонецОбласти

